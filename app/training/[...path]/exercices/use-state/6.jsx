"use client";

import { Plus, Trash } from "lucide-react";
import {useState} from "react";
import {cn} from "@/src/utils/cn";

const useTodos = () => {
  const [todos, setTodos] = useState([]);

  const addTodo = (todo) => {
    if (!todo) return;
    /*Cr√©ation d'un nouvel objet newTodo :*/
    const newTodo = {
      id: Date.now(),
      text: todo,
      completed: false
    }
    /*Ici, un nouvel objet newTodo est cr√©√©. Il poss√®de trois propri√©t√©s :
    id: Un identifiant unique g√©n√©r√© √† partir de la fonction Date.now().
    text: La valeur de l'argument todo qui est pass√© √† la fonction addTodo.
    completed: Une valeur bool√©enne d√©finie sur false pour indiquer que la t√¢che n'est
     pas encore compl√©t√©e.*/

    /*Ajout du nouvel objet newTodo √† la liste des todos :*/
    const newTodos = [...todos, newTodo];
    /*Dans cette ligne, un nouvel array newTodos est cr√©√© en utilisant le spread
     operator ... Cela permet de cr√©er une nouvelle copie de l'array todos (supposons
      qu'il existe d√©j√† quelque part dans ton code) et d'y ajouter le nouvel objet
       newTodo.*/

    /*Mise √† jour de la liste des todos :*/
    setTodos(newTodos);
  }

  const updateTodo = (id, newTodo) => {
    /*Cr√©ation d'un nouvel array newTodos en utilisant la m√©thode map :*/
    /*La m√©thode map est utilis√©e sur l'array todos. Elle it√®re sur chaque √©l√©ment de
     l'array et retourne un nouvel array avec les √©l√©ments transform√©s selon une fonction donn√©e.
     */
    const newTodos = todos.map((todo) => {
      /*Condition pour la mise √† jour du todo :*/
      /*Pour chaque √©l√©ment todo de l'array todos, cette condition v√©rifie si
       l'identifiant id fourni ne correspond pas √† l'identifiant de la t√¢che actuelle.
        Si c'est le cas, elle retourne simplement la t√¢che actuelle sans la modifier:*/
      if (todo.id !== id) return todo;
      /*Si l'identifiant de la t√¢che actuelle correspond √† l'identifiant fourni, la
       fonction map retourne la nouvelle t√¢che newTodo √† la place de la t√¢che actuelle:
       */
      return newTodo;
    })
    setTodos(newTodos);
  }

  const removeTodo = (id) => {
    /*Cr√©ation d'un nouvel array newTodos en utilisant la m√©thode filter :*/
    /*La m√©thode filter est utilis√©e sur l'array todos. Elle it√®re sur chaque √©l√©ment' +
    ' de l'array et retourne un nouvel array contenant uniquement les √©l√©ments pour lesquels la fonction de filtrage retourne true.*/
    /*Filtrage des todos pour exclure celui avec l'identifiant fourni :*/
    const newTodos = todos.filter((todo) => todo.id !== id);
    /*Cette condition v√©rifie si l'identifiant de la t√¢che actuelle todo est diff√©rent
     de l'identifiant fourni id. Si c'est le cas, la t√¢che est incluse dans le nouvel array newTodos.
     */
    setTodos(newTodos);
  }

  return {
    todos,
    addTodo,
    updateTodo,
    removeTodo
  };
}

export const Todos = () => {
  const [todo, setTodo] = useState("");
  const {todos, addTodo, updateTodo, removeTodo} = useTodos();
  const [editingID, setEditingID] = useState(null);

  const handleAddTodo = () => {
    addTodo(todo);
    setTodo("");
  }

  return (
    <div className="card w-full max-w-md border border-base-300 bg-base-200 shadow-xl">
      <div className="card-body">
        <h2 className="card-title">Todos</h2>
        <div className="flex w-full items-center gap-2">
          <div className="input input-bordered flex flex-1 items-center gap-2">
            <input
              type="checkbox"
              checked={false}
              className="checkbox checkbox-sm"
            />
            {/* ü¶Å Ajoute un √©tat "Todo" et contr√¥le l'input */}
            <input type="text" className="grow" placeholder="Some task"
            value={todo} onChange={(e) => setTodo(e.target.value)}
                   onKeyDown={(e) => {
                     if (e.key === "Enter") {
                       handleAddTodo();
                     }
                   }}/>
          </div>
          <button className="btn btn-primary" onClick={() => handleAddTodo()}>
            <Plus size={22} />
          </button>
        </div>
        <div className="divider">List</div>
        <ul className="space-y-2">
          {todos.map((todo) =>
              <li className="flex w-full items-center gap-2"
                  key={todo.id}>
                <div className={cn("input flex flex-1 items-center gap-2", {
                  "input-bordered": editingID === todo.id,
                })}>
                  <input type="checkbox" className="checkbox checkbox-sm"
                  onChange={() => {
                    /*Lorsque l'√©v√©nement onChange est d√©clench√©, cette ligne inverse
                     l'√©tat de compl√©tude de la t√¢che actuelle. Si todo.completed est true, newCompleted deviendra false, et vice versa.
                     */
                    const newCompleted = !todo.completed;
                    /*Mise √† jour de la t√¢che :*/
                    /*Ensuite, cette ligne appelle la fonction updateTodo, passant
                     l'identifiant de la t√¢che actuelle todo.id et un nouvel objet de todo. Cet objet est construit en copiant toutes les propri√©t√©s de la t√¢che actuelle (...todo) et en rempla√ßant la propri√©t√© completed par la nouvelle valeur newCompleted.
                     */
                    updateTodo(todo.id, {
                      ...todo,
                      completed: newCompleted
                    })
                  }}
                  checked={todo.completed}/>
                  {editingID === todo.id ? (
                      <input
                          ref={(r) => r?.focus()}
                          onBlur={(e) => {
                            const newValue = e.target.value;
                            updateTodo(todo.id, {
                              ...todo,
                              text: newValue,
                            });
                            setEditingID(null);
                          }}
                          defaultValue={todo.text}
                      />
                  ) : (
                      <p
                          onClick={() => {
                            setEditingID(todo.id);
                          }}
                          className={cn({
                            "line-through text-neutral-content": todo.completed,
                          })}
                      >
                        {todo.text}
                      </p>
                  )}
                </div>
                <button className="btn btn-ghost" onClick={() => removeTodo(todo.id)}>
                  <Trash size={16} />
                </button>
              </li>
          )}
          {todos.length === 0 ? (
              <p className="text-neutral-content">Empty</p>
          ) : null}
        </ul>
      </div>
    </div>
  );
};

export default function App() {
  return (
    <div className="flex w-full justify-center">
      <Todos />
    </div>
  );
}
